{"version":3,"sources":["algorithms/Utility.js","algorithms/MergeSort.js","SortingVisualiser/SortingVisualiser.jsx","algorithms/BubbleSort.js","algorithms/InsertionSort.js","App.js","serviceWorker.js","index.js"],"names":["swap","arr","index1","index2","temp","getMergeSortAnimations","copy","len","length","animations","mergeSort","aux","left","right","mid","Math","floor","i","j","k","push","merge","Array","SortingVisualizer","props","useState","setArr","isSorting","setIsSorting","isSorted","setIsSorted","containerRef","useRef","initialiseArray","resetArrayColour","shuffle","animateArrayUpdate","forEach","index","comparison","swapped","setTimeout","prevArr","newValue","newArr","animateArrayAccess","arrayBars","current","children","arrayBarStyle","style","backgroundColor","animateSortedArray","DELAY","useEffect","className","ref","map","barHeight","height","width","key","onClick","getBubbleSortAnimations","getInsertionSortAnimations","randomIndex","random","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.52cc7393.chunk.js","sourcesContent":["export function swap(arr, index1, index2) {\r\n  const temp = arr[index1];\r\n  arr[index1] = arr[index2];\r\n  arr[index2] = temp;\r\n}\r\n","export function getMergeSortAnimations(arr) {\r\n  const copy = [...arr];\r\n  const len = copy.length;\r\n  const aux = Array(len);\r\n  const animations = [];\r\n  mergeSort(copy, aux, 0, len - 1, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSort(arr, aux, left, right, animations) {\r\n  if (right <= left) return;\r\n  const mid = left + Math.floor((right - left) / 2);\r\n  mergeSort(arr, aux, left, mid, animations);\r\n  mergeSort(arr, aux, mid + 1, right, animations);\r\n  merge(arr, aux, left, mid, right, animations);\r\n}\r\n\r\nfunction merge(arr, aux, left, mid, right, animations) {\r\n  for (let i = left; i <= right; i++) aux[i] = arr[i];\r\n  let i = left;\r\n  let j = mid + 1;\r\n  let k = left;\r\n  // for (let k = left; k <= right; k++) {\r\n  //   if (i <= mid) {\r\n  //     animations.push([[i], false]);\r\n  //     animations.push([[k, aux[i]], true]);\r\n  //     arr[k] = aux[i++];\r\n  //   } else if (j > right) {\r\n  //     animations.push([[i], false]);\r\n  //     animations.push([[k, aux[i]], true]);\r\n  //     arr[k] = aux[i++];\r\n  //   } else if (aux[j] < aux[i]) {\r\n  //     animations.push([[i, j], false]);\r\n  //     animations.push([[k, aux[j]], true]);\r\n  //     arr[k] = aux[j++];\r\n  //   } else {\r\n  //     animations.push([[i, j], false]);\r\n  //     animations.push([[k, aux[i]], true]);\r\n  //     arr[k] = aux[i++];\r\n  //   }\r\n  // }\r\n  while (i <= mid && j <= right) {\r\n    if (aux[i] <= aux[j]) {\r\n      animations.push([[i, j], false]);\r\n      animations.push([[k, aux[i]], true]);\r\n      arr[k++] = aux[i++];\r\n    } else {\r\n      animations.push([[i, j], false]);\r\n      animations.push([[k, aux[j]], true]);\r\n      arr[k++] = aux[j++];\r\n    }\r\n  }\r\n  while (i <= mid) {\r\n    animations.push([[i], false]);\r\n    animations.push([[k, aux[i]], true]);\r\n    arr[k++] = aux[i++];\r\n  }\r\n  while (j <= right) {\r\n    animations.push([[j], false]);\r\n    animations.push([[k, aux[j]], true]);\r\n    arr[k++] = aux[j++];\r\n  }\r\n}\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./SortingVisualiser.css\";\r\nimport { getQuickSortAnimations } from \"../algorithms/QuickSort\";\r\nimport { getInsertionSortAnimations } from \"../algorithms/InsertionSort\";\r\nimport { getMergeSortAnimations } from \"../algorithms/MergeSort\";\r\nimport { getBubbleSortAnimations } from \"../algorithms/BubbleSort\";\r\n\r\nconst ARR_LEN = 200;\r\nconst MIN_NUM = 5;\r\nconst MAX_NUM = 700;\r\nconst DELAY = 2;\r\nconst ACCESSED_COLOUR = \"crimson\";\r\nconst SORTED_COLOUR = \"orange\";\r\n\r\nexport default function SortingVisualizer(props) {\r\n  const [arr, setArr] = useState([]);\r\n  const [isSorting, setIsSorting] = useState(false);\r\n  const [isSorted, setIsSorted] = useState(false);\r\n  const containerRef = useRef(null);\r\n\r\n  useEffect(initialiseArray, []);\r\n\r\n  function initialiseArray() {\r\n    if (isSorting) return;\r\n    if (isSorted) resetArrayColour();\r\n    setIsSorted(false);\r\n    const arr = [];\r\n    for (let i = 0; i < ARR_LEN; i++) {\r\n      arr.push((MAX_NUM - MIN_NUM) * (i / ARR_LEN) + MIN_NUM);\r\n    }\r\n    shuffle(arr);\r\n    setArr(arr);\r\n  }\r\n\r\n  function mergeSort() {\r\n    const animations = getMergeSortAnimations(arr);\r\n    animateArrayUpdate(animations);\r\n  }\r\n\r\n  function insertionSort() {\r\n    const animations = getInsertionSortAnimations(arr);\r\n    animateArrayUpdate(animations);\r\n  }\r\n\r\n  //   function quickSort() {\r\n  //     const animations = getQuickSortAnimations(arr);\r\n  //     animateArrayUpdate(animations);\r\n  //   }\r\n  function bubbleSort() {\r\n    const animations = getBubbleSortAnimations(arr);\r\n    animateArrayUpdate(animations);\r\n  }\r\n\r\n  function animateArrayUpdate(animations) {\r\n    if (isSorting) return;\r\n    setIsSorting(true);\r\n    animations.forEach(([comparison, swapped], index) => {\r\n      setTimeout(() => {\r\n        if (!swapped) {\r\n          if (comparison.length === 2) {\r\n            const [i, j] = comparison;\r\n            animateArrayAccess(i);\r\n            animateArrayAccess(j);\r\n          } else {\r\n            const [i] = comparison;\r\n            animateArrayAccess(i);\r\n          }\r\n        } else {\r\n          setArr((prevArr) => {\r\n            const [k, newValue] = comparison;\r\n            const newArr = [...prevArr];\r\n            newArr[k] = newValue;\r\n            return newArr;\r\n          });\r\n        }\r\n      }, index * DELAY);\r\n    });\r\n    setTimeout(() => {\r\n      animateSortedArray();\r\n    }, animations.length * DELAY);\r\n  }\r\n\r\n  function animateArrayAccess(index) {\r\n    const arrayBars = containerRef.current.children;\r\n    const arrayBarStyle = arrayBars[index].style;\r\n    setTimeout(() => {\r\n      arrayBarStyle.backgroundColor = ACCESSED_COLOUR;\r\n    }, DELAY);\r\n    setTimeout(() => {\r\n      arrayBarStyle.backgroundColor = \"\";\r\n    }, DELAY * 2);\r\n  }\r\n\r\n  function animateSortedArray() {\r\n    const arrayBars = containerRef.current.children;\r\n    for (let i = 0; i < arrayBars.length; i++) {\r\n      const arrayBarStyle = arrayBars[i].style;\r\n      setTimeout(\r\n        () => (arrayBarStyle.backgroundColor = SORTED_COLOUR),\r\n        i * DELAY\r\n      );\r\n    }\r\n    setTimeout(() => {\r\n      setIsSorted(true);\r\n      setIsSorting(false);\r\n    }, arrayBars.length * DELAY);\r\n  }\r\n\r\n  function resetArrayColour() {\r\n    const arrayBars = containerRef.current.children;\r\n    for (let i = 0; i < arr.length; i++) {\r\n      const arrayBarStyle = arrayBars[i].style;\r\n      arrayBarStyle.backgroundColor = \"\";\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"visualiser-container\">\r\n      <div className=\"array-container\" ref={containerRef}>\r\n        {arr.map((barHeight, index) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            style={{\r\n              height: `${barHeight}px`,\r\n              width: `${100 / ARR_LEN}vw`,\r\n            }}\r\n            key={index}\r\n          ></div>\r\n        ))}\r\n      </div>\r\n      <footer className=\"app-footer\">\r\n        <ul>\r\n          <li>\r\n            <button className=\"app-button\" onClick={initialiseArray}>\r\n              Generate new array\r\n            </button>\r\n          </li>\r\n          <li>\r\n            <button className=\"app-button\" onClick={bubbleSort}>\r\n              Bubble sort\r\n            </button>\r\n          </li>\r\n          <li>\r\n            <button className=\"app-button\" onClick={insertionSort}>\r\n              Insertion sort\r\n            </button>\r\n          </li>\r\n          <li>\r\n            <button className=\"app-button\" onClick={mergeSort}>\r\n              Merge sort\r\n            </button>\r\n          </li>\r\n\r\n          <li>\r\n            <button className=\"app-button\">Quick sort</button>\r\n          </li>\r\n        </ul>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst shuffle = (arr) => {\r\n  for (let i = arr.length - 1; i >= 0; i--) {\r\n    const randomIndex = Math.floor(Math.random() * (i + 1));\r\n    const temp = arr[i];\r\n    arr[i] = arr[randomIndex];\r\n    arr[randomIndex] = temp;\r\n  }\r\n};\r\n","import { swap } from \"./Utility\";\r\nexport function getBubbleSortAnimations(arr) {\r\n  const copy = [...arr];\r\n  const animations = [];\r\n  for (let i = 0; i < copy.length - 1; i++) {\r\n    for (let j = 0; j < copy.length - i - 1; j++) {\r\n      animations.push([[j, j + 1], false]); //for comparison\r\n      if (copy[j + 1] < copy[j]) {\r\n        animations.push([[j, copy[j + 1]], true]); //for swapping\r\n        animations.push([[j + 1, copy[j]], true]);\r\n        swap(copy, j, j + 1);\r\n      }\r\n    }\r\n  }\r\n  return animations;\r\n}\r\n","import { swap } from \"./Utility\";\r\n\r\nexport function getInsertionSortAnimations(arr) {\r\n  const copy = [...arr];\r\n  const animations = [];\r\n  for (let i = 1; i < copy.length; i++) {\r\n    for (let j = i - 1; j >= 0; j--) {\r\n      animations.push([[j, j + 1], false]); //for comparison\r\n      if (copy[j + 1] < copy[j]) {\r\n        animations.push([[j, copy[j + 1]], true]); //for swapping\r\n        animations.push([[j + 1, copy[j]], true]);\r\n        swap(copy, j, j + 1);\r\n      } else break;\r\n    }\r\n  }\r\n  return animations;\r\n}\r\n","import React from \"react\";\nimport SortingVisualiser from \"./SortingVisualiser/SortingVisualiser\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualiser />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}